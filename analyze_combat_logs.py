#!/usr/bin/env python3
"""
DCS Combat Log Analyzer
Analyzes combat logs generated by the DCS World Combat Logger script
"""

import csv
import json
import sys
from datetime import datetime
from collections import defaultdict
import argparse
import matplotlib.pyplot as plt
import pandas as pd


class CombatLogAnalyzer:
    def __init__(self, csv_file=None, json_file=None):
        self.csv_file = csv_file
        self.json_file = json_file
        self.events = []
        self.stats = defaultdict(lambda: {
            'air_kills': 0,
            'ground_kills': 0,
            'naval_kills': 0,
            'deaths': 0,
            'crashes': 0,
            'ejections': 0,
            'team_kills': 0,
            'sorties': 0,
            'flight_time': 0,
            'weapons_used': defaultdict(int),
            'victims': defaultdict(int),
            'killed_by': defaultdict(int)
        })
    
    def load_csv(self):
        """Load and parse CSV combat log"""
        if not self.csv_file:
            return
        
        try:
            with open(self.csv_file, 'r', encoding='utf-8') as f:
                reader = csv.DictReader(f)
                for row in reader:
                    self.events.append(row)
                    self._process_event(row)
            print(f"Loaded {len(self.events)} events from CSV")
        except Exception as e:
            print(f"Error loading CSV: {e}")
    
    def load_json(self):
        """Load and parse JSON statistics"""
        if not self.json_file:
            return
        
        try:
            with open(self.json_file, 'r') as f:
                data = json.load(f)
                self.mission_time = data.get('missionTime', 0)
                
                for pilot, stats in data.get('stats', {}).items():
                    self.stats[pilot].update({
                        'air_kills': stats.get('airKills', 0),
                        'ground_kills': stats.get('groundKills', 0),
                        'naval_kills': stats.get('navalKills', 0),
                        'deaths': stats.get('deaths', 0),
                        'crashes': stats.get('crashes', 0),
                        'ejections': stats.get('ejections', 0),
                        'team_kills': stats.get('teamKills', 0),
                        'sorties': stats.get('sorties', 0),
                        'flight_time': stats.get('flightTime', 0)
                    })
            print(f"Loaded statistics from JSON")
        except Exception as e:
            print(f"Error loading JSON: {e}")
    
    def _process_event(self, event):
        """Process a single event from CSV"""
        event_type = event.get('Event', '')
        
        # Handle both old (Timestamp) and new (MissionTime) formats
        mission_time = event.get('MissionTime') or event.get('Timestamp', '0')
        try:
            self.mission_time = float(mission_time)
        except:
            pass
        
        if event_type == 'KILL':
            killer = event.get('Killer', 'Unknown')
            victim = event.get('Victim', 'Unknown')
            weapon = event.get('Weapon', 'Unknown')
            details = event.get('Details', '')
            
            if killer != 'Unknown':
                if 'Air' in details:
                    self.stats[killer]['air_kills'] += 1
                elif 'Ground' in details or 'Static' in details:
                    self.stats[killer]['ground_kills'] += 1
                elif 'Naval' in details:
                    self.stats[killer]['naval_kills'] += 1
                
                if 'TEAM KILL' in details:
                    self.stats[killer]['team_kills'] += 1
                
                self.stats[killer]['weapons_used'][weapon] += 1
                self.stats[killer]['victims'][victim] += 1
            
            if victim != 'Unknown':
                self.stats[victim]['killed_by'][killer] += 1
        
        elif event_type == 'PILOT_DEAD':
            pilot = event.get('Killer', 'Unknown')  # In death events, killer field contains the pilot
            if pilot != 'Unknown':
                self.stats[pilot]['deaths'] += 1
        
        elif event_type == 'CRASH':
            pilot = event.get('Killer', 'Unknown')
            if pilot != 'Unknown':
                self.stats[pilot]['crashes'] += 1
        
        elif event_type == 'EJECTION':
            pilot = event.get('Killer', 'Unknown')
            if pilot != 'Unknown':
                self.stats[pilot]['ejections'] += 1
        
        elif event_type == 'TAKEOFF':
            pilot = event.get('Killer', 'Unknown')
            if pilot != 'Unknown':
                self.stats[pilot]['sorties'] += 1
    
    def calculate_scores(self):
        """Calculate scores for all pilots"""
        scores = []
        
        for pilot, stats in self.stats.items():
            score = (stats['air_kills'] * 10 + 
                    stats['ground_kills'] * 5 + 
                    stats['naval_kills'] * 7 - 
                    stats['deaths'] * 5 - 
                    stats['crashes'] * 3 - 
                    stats['team_kills'] * 20)
            
            scores.append({
                'pilot': pilot,
                'score': score,
                'air_kills': stats['air_kills'],
                'ground_kills': stats['ground_kills'],
                'naval_kills': stats['naval_kills'],
                'total_kills': stats['air_kills'] + stats['ground_kills'] + stats['naval_kills'],
                'deaths': stats['deaths'],
                'crashes': stats['crashes'],
                'ejections': stats['ejections'],
                'team_kills': stats['team_kills'],
                'sorties': stats['sorties'],
                'flight_time': stats['flight_time'],
                'kd_ratio': stats['air_kills'] / max(stats['deaths'], 1)
            })
        
        return sorted(scores, key=lambda x: x['score'], reverse=True)
    
    def print_scoreboard(self, top_n=None):
        """Print formatted scoreboard"""
        scores = self.calculate_scores()
        
        if top_n:
            scores = scores[:top_n]
        
        print("\n" + "="*80)
        print("COMBAT SCOREBOARD".center(80))
        print("="*80)
        print(f"{'Rank':<5} {'Pilot':<20} {'Score':<8} {'A2A':<5} {'A2G':<5} {'Naval':<6} {'Deaths':<7} {'K/D':<6} {'TK':<4}")
        print("-"*80)
        
        for i, entry in enumerate(scores, 1):
            print(f"{i:<5} {entry['pilot'][:20]:<20} {entry['score']:<8} "
                  f"{entry['air_kills']:<5} {entry['ground_kills']:<5} "
                  f"{entry['naval_kills']:<6} {entry['deaths']:<7} "
                  f"{entry['kd_ratio']:<6.2f} {entry['team_kills']:<4}")
        
        print("="*80)
    
    def print_pilot_details(self, pilot_name):
        """Print detailed statistics for a specific pilot"""
        if pilot_name not in self.stats:
            print(f"No data found for pilot: {pilot_name}")
            return
        
        stats = self.stats[pilot_name]
        print(f"\n{'='*50}")
        print(f"Pilot Details: {pilot_name}")
        print(f"{'='*50}")
        print(f"Air Kills: {stats['air_kills']}")
        print(f"Ground Kills: {stats['ground_kills']}")
        print(f"Naval Kills: {stats['naval_kills']}")
        print(f"Total Kills: {stats['air_kills'] + stats['ground_kills'] + stats['naval_kills']}")
        print(f"Deaths: {stats['deaths']}")
        print(f"Crashes: {stats['crashes']}")
        print(f"Ejections: {stats['ejections']}")
        print(f"Team Kills: {stats['team_kills']}")
        print(f"Sorties: {stats['sorties']}")
        print(f"Flight Time: {stats['flight_time']:.1f} seconds ({stats['flight_time']/3600:.1f} hours)")
        
        if stats['weapons_used']:
            print(f"\nWeapons Used:")
            for weapon, count in sorted(stats['weapons_used'].items(), key=lambda x: x[1], reverse=True):
                print(f"  {weapon}: {count}")
        
        if stats['victims']:
            print(f"\nVictims:")
            for victim, count in sorted(stats['victims'].items(), key=lambda x: x[1], reverse=True)[:10]:
                print(f"  {victim}: {count}")
        
        if stats['killed_by']:
            print(f"\nKilled By:")
            for killer, count in sorted(stats['killed_by'].items(), key=lambda x: x[1], reverse=True):
                print(f"  {killer}: {count}")
    
    def generate_charts(self, output_dir='.'):
        """Generate statistical charts"""
        scores = self.calculate_scores()
        
        if not scores:
            print("No data to generate charts")
            return
        
        # Top pilots bar chart
        plt.figure(figsize=(12, 6))
        top_pilots = scores[:10]
        pilots = [p['pilot'][:15] for p in top_pilots]
        pilot_scores = [p['score'] for p in top_pilots]
        
        plt.bar(pilots, pilot_scores)
        plt.xlabel('Pilot')
        plt.ylabel('Score')
        plt.title('Top 10 Pilots by Score')
        plt.xticks(rotation=45, ha='right')
        plt.tight_layout()
        plt.savefig(f'{output_dir}/top_pilots.png')
        plt.close()
        
        # Kill distribution pie chart
        plt.figure(figsize=(10, 8))
        total_air = sum(p['air_kills'] for p in scores)
        total_ground = sum(p['ground_kills'] for p in scores)
        total_naval = sum(p['naval_kills'] for p in scores)
        
        if total_air + total_ground + total_naval > 0:
            labels = ['Air Kills', 'Ground Kills', 'Naval Kills']
            sizes = [total_air, total_ground, total_naval]
            plt.pie(sizes, labels=labels, autopct='%1.1f%%')
            plt.title('Kill Distribution by Type')
            plt.savefig(f'{output_dir}/kill_distribution.png')
        plt.close()
        
        # K/D ratio scatter plot
        plt.figure(figsize=(10, 6))
        kills = [p['total_kills'] for p in scores]
        deaths = [p['deaths'] for p in scores]
        
        plt.scatter(deaths, kills, alpha=0.6)
        for i, p in enumerate(scores[:5]):  # Label top 5
            plt.annotate(p['pilot'][:10], (p['deaths'], p['total_kills']))
        
        plt.xlabel('Deaths')
        plt.ylabel('Total Kills')
        plt.title('Kills vs Deaths')
        plt.grid(True, alpha=0.3)
        plt.savefig(f'{output_dir}/kd_scatter.png')
        plt.close()
        
        print(f"Charts saved to {output_dir}/")
    
    def export_to_excel(self, filename='combat_analysis.xlsx'):
        """Export analysis to Excel file"""
        scores = self.calculate_scores()
        
        # Create DataFrame
        df = pd.DataFrame(scores)
        
        # Create Excel writer
        with pd.ExcelWriter(filename, engine='openpyxl') as writer:
            # Scoreboard sheet
            df.to_excel(writer, sheet_name='Scoreboard', index=False)
            
            # Events sheet (if CSV was loaded)
            if self.events:
                events_df = pd.DataFrame(self.events)
                events_df.to_excel(writer, sheet_name='Events', index=False)
            
            # Summary statistics
            summary = {
                'Total Pilots': len(scores),
                'Total Air Kills': sum(p['air_kills'] for p in scores),
                'Total Ground Kills': sum(p['ground_kills'] for p in scores),
                'Total Naval Kills': sum(p['naval_kills'] for p in scores),
                'Total Deaths': sum(p['deaths'] for p in scores),
                'Total Team Kills': sum(p['team_kills'] for p in scores),
                'Total Sorties': sum(p['sorties'] for p in scores),
                'Total Flight Hours': sum(p['flight_time'] for p in scores) / 3600
            }
            summary_df = pd.DataFrame(list(summary.items()), columns=['Statistic', 'Value'])
            summary_df.to_excel(writer, sheet_name='Summary', index=False)
        
        print(f"Analysis exported to {filename}")


def main():
    parser = argparse.ArgumentParser(description='Analyze DCS Combat Logs')
    parser.add_argument('--csv', help='Path to CSV log file')
    parser.add_argument('--json', help='Path to JSON stats file')
    parser.add_argument('--pilot', help='Show details for specific pilot')
    parser.add_argument('--top', type=int, help='Show top N pilots')
    parser.add_argument('--charts', action='store_true', help='Generate statistical charts')
    parser.add_argument('--excel', help='Export to Excel file')
    parser.add_argument('--output-dir', default='.', help='Output directory for charts')
    
    args = parser.parse_args()
    
    if not args.csv and not args.json:
        print("Error: Please provide at least one input file (--csv or --json)")
        parser.print_help()
        sys.exit(1)
    
    # Create analyzer
    analyzer = CombatLogAnalyzer(args.csv, args.json)
    
    # Load data
    analyzer.load_csv()
    analyzer.load_json()
    
    # Process based on arguments
    if args.pilot:
        analyzer.print_pilot_details(args.pilot)
    else:
        analyzer.print_scoreboard(args.top)
    
    if args.charts:
        analyzer.generate_charts(args.output_dir)
    
    if args.excel:
        analyzer.export_to_excel(args.excel)


if __name__ == "__main__":
    main() 